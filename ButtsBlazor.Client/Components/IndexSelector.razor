@using ButtsBlazor.Shared.ViewModels
@using ButtsBlazor.Client.Layout
@implements IButtonPressListener
@implements IDisposable

@code {
    [Parameter]
    public bool Focus { get; set; } = true;

    [Parameter]
    public int RowSize { get; set; } = 4;

    [Parameter]
    public int MaxIndex { get; set; } = 1;

    [Parameter] public EventCallback<int> SelectedIndexChanged { get; set; }
    [Parameter] public EventCallback<int> OnItemSelected { get; set; }
    [Parameter]
    public int SelectedIndex { get; set; }
    [CascadingParameter]
    public RootPageControls? Page { get; set; }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Page?.AddHandler(this, OnButtonPressed);
    }

    public async Task OnButtonPressed(GamepadButton obj)
    {
        Console.WriteLine("IndexSelector OnButtonPressed {0}", obj);
        switch (obj)
        {
            // case "Tab":
            //     await SetSelectedIndex(SelectedIndex + (obj.ShiftKey ? -1 : 1));
            //     break;
            case GamepadButton.Right:
                await SetSelectedIndex(SelectedIndex + 1);
                break;
            case GamepadButton.Left:
                await SetSelectedIndex(SelectedIndex - 1);
                break;
            case GamepadButton.Up:
                await SetSelectedIndex(SelectedIndex - RowSize);
                break;
            case GamepadButton.Down:
                await SetSelectedIndex(SelectedIndex + RowSize);
                break;
            case GamepadButton.Primary:
            case GamepadButton.Select:
                await Select(SelectedIndex);
                break;
        }
    }

    private async Task Select(int selectedIndex)
    {
        Console.WriteLine("Select {0}", selectedIndex);

        await SetSelectedIndex(selectedIndex);
        Console.WriteLine("Item selected: {0}",selectedIndex);
        await OnItemSelected.InvokeAsync(selectedIndex);
    }

    private async Task SetSelectedIndex(int newIndex)
    {
        Console.WriteLine("SetSelectedIndex {0}", newIndex);
        var previousIndex = SelectedIndex;
        SelectedIndex = newIndex;
        if (MaxIndex == 0)
            SelectedIndex = 0;
        else
            SelectedIndex %= MaxIndex;
        if (SelectedIndex < 0)
            SelectedIndex = MaxIndex + SelectedIndex;

        Console.WriteLine("Selected index changed from {0} to {1}", previousIndex, SelectedIndex);
        await SelectedIndexChanged.InvokeAsync(SelectedIndex);
    }

    public void Dispose()
    {
    }

}
