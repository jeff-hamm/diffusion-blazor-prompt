@using ButtsBlazor.Client.Services
@using ButtsBlazor.Shared.ViewModels
@using ButtsBlazor.Client.Layout
@inject IJSRuntime Js
@implements IAsyncDisposable
@implements IButtonPressListener

@if (Options != null && !IsPreselected)
{
    @if (!String.IsNullOrEmpty(Options.Prefix))
    {
        <div class="slot-text static prefix">@((MarkupString)Options.Prefix)</div>
    }
    @if(Choice != null || Options.Choices.Length > 0)
    {
        @if (IsPreselected)
        {
             <div class="slot-text static choice">@((MarkupString)Choice)</div>
        }
        else
        {
            <div class="wheel @(IsSelected ? "selected" : "") @(Choice != null ? "chosen" : "")" @onclick="OnClicked">
                <div class="overlay"></div>
                @if (Choice != null)
                {
                    <div class="slot-text box">@((MarkupString)Choice)</div>
                }
                else
                {
                    <div class="boxes boxes-length-@(Options.Choices.Length)" style="@ContainerStyle" @ref="boxesRef">
                        <div class="box slot-text" style="@BoxStyle">@((MarkupString)Options.Choices[^1])</div>
                        @foreach (var choice in Options.Choices)
                        {
                            <div class="box slot-text" style="@BoxStyle">@((MarkupString)choice)</div>
                        }
                    </div>
                }
            </div>
        }
    }
    @if (!String.IsNullOrEmpty(Options.Suffix))
    {
        <div class="slot-text static suffix">@((MarkupString)Options.Suffix)</div>
    }
}


@code {
    [CascadingParameter]
    public RootPageControls? Page { get; set; }
    [Parameter]
    public EventCallback<SlotWheel> Clicked { get; set; }
    [Parameter]
    public PromptChoice? Options { get; set; }

    [Parameter]
    public EventCallback<string> ChoiceMade { get; set; }

    [Parameter]
    public bool IsSpinning { get; set; }

    [Parameter]
    public bool IsSelected { get; set; }

    [Parameter]
    public bool IsPreselected { get; set; }

    [Parameter]
    public int WheelHeight { get; set; } = 210;
    [Parameter]
    public int WheelWidth { get; set; } = 200;
    [Parameter]
    public string? Choice { get; set; }

    private PromptChoice? currentSpinnerOptions;
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if(Page != null)
            Page.AddHandler(this, OnButtonPressed);
        Reset();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender || Options != currentSpinnerOptions || jsSpinner == null)
        {
            if (jsSpinner != null)
            {
                if (IsSpinning)
                {
                    await jsSpinner.InvokeVoidAsync("dispose");
                    IsSpinning = false;
                }
                await jsSpinner.DisposeAsync();
                jsSpinner = null;
            }
            currentSpinnerOptions = null;
            if (!boxesRef.HasValue) return;
            if (_promptModule != null)
                await _promptModule.DisposeAsync();
            _promptModule = await Js.InvokeAsync<IJSObjectReference>("import", "/js/slots.js");
            jsSpinner = await Js.InvokeAsync<IJSObjectReference>("slots.spin", boxesRef.Value);
        }
        if (NeedsSpin && (!IsSpinning || currentSpinnerOptions == null))
        {
            currentSpinnerOptions = Options;
            NeedsSpin = false;
            this.IsSpinning = true;
            try
            {
                var spinning = Options;
                var ix = await jsSpinner.InvokeAsync<int>("spin",new object[]  {Options.Choices});
                if (!isDisposed && currentSpinnerOptions != null && Options == spinning && IsSelected)
                {
                    if (spinning.Choices.Length > 0)
                    {
                        if (ix < 0)
                            ix = 0;
                        if (ix >= spinning.Choices.Length)
                            ix = spinning.Choices.Length - 1;
                        spinning.Choose(spinning.Choices[ix]);
                        await ChoiceMade.InvokeAsync(spinning.Choices[ix]);
                        StateHasChanged();
                    }
                }
            }
            finally
            {
                this.IsSpinning = false;
            }
        }
    }
    private bool NeedsSpin { get; set; }
    private void Reset()
    {
        NeedsSpin = Choice == null ;
        //        var choiceCount = Choice == null ? 0 :  Choice.Choices.Length - 1;
        //        AddUpdate(boxesStyleDict, "transform", $"translateY(-{WheelHeight * (choiceCount)}px)");
        //        AddUpdate(boxesStyleDict, "transitionDuration", "0s");
        AddUpdate(singleStyleDict, "height", WheelHeight + "px");
        AddUpdate(singleStyleDict, "filter ", "blur(0)");
        BoxStyle = ToStyle(singleStyleDict);
        ContainerStyle = ToStyle(boxesStyleDict);
    }


    private void AddUpdate<TKey, TVal>(Dictionary<TKey, TVal> dict, TKey key, TVal val) where TKey:notnull
    {
        if (!dict.TryAdd(key, val))
            dict[key] = val;
    }

    private Dictionary<string, string> boxesStyleDict = new();
    private Dictionary<string, string> singleStyleDict = new();

    private string ToStyle<TKey, TVal>(Dictionary<TKey, TVal>? dict) where TKey:notnull => String.Join(';', dict?.Select(kvp => $"{kvp.Key}: {kvp.Value}") ?? Array.Empty<string>());

    private string BoxStyle { get; set; } = "";

    private string ContainerStyle { get; set; } = "";

    private bool isDisposed = false;
    public async ValueTask DisposeAsync()
    {
        isDisposed = true;
        if (jsSpinner != null)
        {
            await jsSpinner.InvokeVoidAsync("dispose");
            await jsSpinner.DisposeAsync();
            jsSpinner = null;
        }
         if (_promptModule != null)
        {
            await _promptModule.DisposeAsync();
            _promptModule = null;
        }
     }

    private ElementReference? boxesRef;
    private IJSObjectReference? jsSpinner;
    private IJSObjectReference? _promptModule;

    private async Task Selected(int obj)
    {
        if (jsSpinner != null && IsSelected)
        {
            await jsSpinner.InvokeVoidAsync("cancel");
        }
    }



    public async Task OnButtonPressed(GamepadButton button)
    {
        switch (button)
        {
            case GamepadButton.Primary:
            case GamepadButton.Select:
                await Selected(0);
                break;
        }
    }

    private async Task OnClicked()
    {
        if (IsSelected)
        {
            await Selected(0);
        }
        else
            await Clicked.InvokeAsync(this);
    }

}
