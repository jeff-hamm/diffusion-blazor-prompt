    @if (IsVisible)
    {
        <div class="loading-container">
            <img src="/infinitypeach.svg" width="100" height="100" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="circle-notch" class="spin loading-icon" role="img" />
            @if (!String.IsNullOrEmpty(Text) || ChildContent != null)
            {
                <div class="loading-content-container">
                    @if (ChildContent != null)
                    {
                        @ChildContent
                    }
                    @if (!String.IsNullOrEmpty(Text))
                    {
                    }
                </div>
            }
        </div>
    }

@code
{
    [Parameter]
    public string? Text { get; set; }
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private bool isVisible;
    [Parameter]
    public bool IsVisible
    {
        get => isVisible;
        set
        {
            if (isVisible == value) return;
            isVisible = value;
            IsVisibleChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    private class SpinningDisposable : IDisposable
    {
        private readonly Spinner owner;

        public SpinningDisposable(Spinner owner)
        {
            this.owner = owner;
            owner.Show();
        }

        public void Dispose()
        {
            owner.Hide();
        }
    }


    public IDisposable ShowDisposable() => new SpinningDisposable(this);

    public void Show()
    {
        if (IsVisible) return;
        IsVisible = true;
        StateHasChanged();
    }

    public void Hide()
    {
        if (!IsVisible) return;
        IsVisible = false;
        StateHasChanged();
    }
}