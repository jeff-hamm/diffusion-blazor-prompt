@page "/generate"
@using ButtsBlazor.Client.Utils
@using ButtsBlazor.Client.Services
@using ButtsBlazor.Shared.Services
@using ButtsBlazor.Shared.ViewModels
@using System.Text.RegularExpressions
@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation
@inject PromptOptions Options
@inject IJSRuntime JsRuntime;
<style>
    .gridOverflow {
        --gridGap: 1px;
        --itemMinWidth: 200px;
        --itemAspectRatio: 1;
        --itemRounding: 6px;
        --linkActionIcon: "\ud83c\udf51";
    }
</style>
<script src="/js/generate.js?ver=1"></script>

<div class="page-intro">
    <h1><strong>B</strong>ooty <strong>D</strong>esign</h1>
</div>

<section @onclick="OnClick">
    <RootPageControls @ref="Page" ReloadRequested="Reload" NavigateBack="NavigateBack" ButtonPress="OnButtonPress" DefaultButtonHandlers="@(_generateRef?.HasGenerated != true)"> </RootPageControls>
    <CascadingValue Value="Page">
	    <AiGenerate  GradioUri="@Options.GradioUri" ImagesGenerated="OnImagesGenerated" Image="@Image" Prompt="@Prompt" Tenant="@Source" NumGeneratedImages="@Options.NumGeneratedImages" @ref="_generateRef">

	    </AiGenerate>
    </CascadingValue>

</section>

@code {
    [Parameter, SupplyParameterFromQuery]
    public string? Image { get; set; }
    [Parameter, SupplyParameterFromQuery]
    public string? Prompt { get; set; }
    [Parameter, SupplyParameterFromQuery]
    public string? Source { get; set; }
    private AiGenerate? _generateRef;
    private void NavigateBack()
    {
        Navigation.NavigateTo("/prompt?image=" + Image);
    }

    private Task Reload()
    {
        if (_generateRef == null)
            return Task.CompletedTask;
        return _generateRef.Reload();
    }

    private async Task OnButtonPress(GamepadButton obj)
    {

        switch (obj)
        {
            case GamepadButton.Select:
                await PromptSave("Reloading");
                //                await Reload();
                break;
            case GamepadButton.Start:
            case GamepadButton.Primary:
                await ConfirmNext();
                break;
        }


    }


    private async Task ConfirmNext()
    {
        if (Page == null) return;
        await PromptSave("Butts Complete!");
    }

    private AiGenerate.GeneratedImage[]? generatedImages;
    private AiGenerate.GeneratedImage? lastGeneratedImage;
    private void OnImagesGenerated(AiGenerate.GeneratedImage[] generated)
    {
	    generatedImages = generated;
	    lastGeneratedImage = generated.Length > 0 ? generated[0] : null;
        StateHasChanged();
    }

    private async Task PromptSave(string title)
    {
        if (generatedImages?.Length > 0)
        {
            Confirm.ShowConfirmationResult dialog;
            if (Source == "camera")
            {
                dialog = await Page?.Confirm.Show(
                    $"This image will be displayed next! You can recover it later by entering the code <span class='save-code'>{lastGeneratedImage?.ImageId}</span>. Would you like to generate another with this prompt or start over?",
                    title + "?", "Start Over", "Do it again!", timeout: 60);

            }
            else
            {
                dialog = await Page?.Confirm.Show(
                    $"Would you like to print this image or start over?",
                    title + "?", "Start Over", "Print it!", timeout: 60);
            }
            var r = await dialog.WaitForResult();
            if (r is ConfirmationResult.Timeout or ConfirmationResult.Confirm)
            {
                if (Source == "camera")
                    Navigation.NavigateTo("/camera", true);
                else
                    Navigation.NavigateTo("/input", true);
            }
            else
            {
                if (Source == "camera")
                    Navigation.NavigateTo("/prompt?source=camera&image=" + Image, true);
                else
                {
                    if (Page?.Confirm != null)
                    {
                        Page.Confirm.Hide();
                    }
                    await JsRuntime.InvokeVoidAsync("window.print");
                    Navigation.NavigateTo("/input", true);
                    //                    await PromptSave(title);
                    //await Reload();
                    return;
                }
            }
                
        }
    }


    public RootPageControls? Page { get; set; }

    private async Task OnClick()
    {
        if (_generateRef == null || _generateRef.IsGenerating)
            return;
        await ConfirmNext();
    }

}
