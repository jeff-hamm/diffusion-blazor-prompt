@page "/generate"
@using ButtsBlazor.Client.Utils
@using ButtsBlazor.Client.Services
@using ButtsBlazor.Shared.Services
@using ButtsBlazor.Shared.ViewModels
@rendermode InteractiveWebAssembly
@inject IButtsApiClient Client
@inject NavigationManager Navigation
@inject PromptOptions Options
@inject IJSRuntime JsRuntime;
<style>
    .gridOverflow {
        --gridGap: 1px;
        --itemMinWidth: 200px;
        --itemAspectRatio: 1;
        --itemRounding: 6px;
        --linkActionIcon: "\ud83c\udf51";
    }
</style>
<script src="/js/generate.js?ver=1"></script>

<div class="page-intro">
    <h1><strong>B</strong>ooty <strong>D</strong>esign</h1>
</div>

<section @onclick="OnClick">
    <RootPageControls @ref="Page" ReloadRequested="Reload" NavigateBack="NavigateBack" ButtonPress="OnButtonPress" DefaultButtonHandlers="@(!HasGenerated)"> </RootPageControls>
    <CascadingValue Value="Page">
        <FullscreenImage Title="@Prompt" Image="@image" SrcImage="@Image">
            @if (HasError)
            {
                <span class="text-danger">Error Generating Image. Trying again...</span>
            }
        </FullscreenImage>
        @if (StatusMessage != null)
        {
            <span class="status-message">@StatusMessage</span>
        }

    </CascadingValue>

</section>

@code {
    public bool HasGenerated { get; set; }
    [Parameter, SupplyParameterFromQuery]
    public string? Image { get; set; }
    [Parameter, SupplyParameterFromQuery]
    public string? Prompt { get; set; }
    public bool HasError { get; set; }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/prompt?image=" + Image);
    }


    private string GeneratingText { get; set; } = "";

    private string[]? imageSrc;
    private string? image;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        callbackHelper = new CallbackHelper<GradioStatus?>(StatusUpdate);
    }

    private string? StatusMessage { get; set; }
    private IJSObjectReference? _promptModule;
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        generatorConfig = new GeneratorPromptConfig()
        {
            NumOutputs = Options.NumGeneratedImages
        };
        StatusMessage = null;
    }

    private GeneratorPromptConfig? generatorConfig;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await Reload();
    }

    private async Task StatusUpdate(GradioStatus? status)
    {
        await InvokeAsync(() =>
        {
            StatusMessage = status?.Message ?? "";
            if (status?.progress_data is {} p)
                StatusMessage += $"{p.Desc} [{p.Progress}/{p.Length}]";

            StateHasChanged();
        });
    }
    private async Task Reload()
    {
        if (IsGenerating) return;
        HasGenerated = false;
        IsGenerating = true;
        HasError = false;
        GeneratingText = $"Generating {Prompt}";
        StateHasChanged();
        try
        {

            if (_promptModule != null)
                await _promptModule.DisposeAsync();
            _promptModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "/js/generate.js");
            await JsRuntime.InvokeVoidAsync("generate.configure",
                Options.GradioUri, null);
            var callback = 
                callbackHelper != null ?
                    DotNetObjectReference.Create(callbackHelper) : null;

            imageSrc = await JsRuntime.InvokeAsync<string[]>("generate.generate",
                Image, Prompt, "", generatorConfig, callback);
            HasGenerated = true;
            if (imageSrc?.Length > 0)
                image = imageSrc[0];
            else
                HasError = true;
        }
        catch (Exception ex)
        {
            HasError = true;
            Console.WriteLine("Error {0}, {1}", ex.Message, ex);
            StatusMessage = ex.Message;

        }
        finally
        {
            IsGenerating = false;
            StateHasChanged();
        }
    }
    public bool IsGenerating { get; set; }
    private async Task OnButtonPress(GamepadButton obj)
    {

        switch (obj)
        {
            case GamepadButton.Select:
                await PromptSave("Reloading");
//                await Reload();
                break;
            case GamepadButton.Start:
            case GamepadButton.Primary:
                await ConfirmNext();
                break;
        }


    }

    Random random = new Random();
    private CallbackHelper<GradioStatus?>? callbackHelper;

    private async Task ConfirmNext()
    {
        if (Page == null) return;
        await PromptSave("Butts Complete!");
    }

    private async Task PromptSave(string title)
    {
        if (imageSrc?.Length > 0)
        {
            var code = random.Next().ToBase64StringNoPadding();
            await Client.UploadFile(imageSrc[0], Prompt!, image!, code);
            var dialog = await Page?.Confirm.Show(
                $"This image will be displayed next! You can recover it later by entering the code <span class='save-code'>{code}</span>. Would you like to generate another with this prompt or start over?",
                title + "?", "Start Over", "Do it Again!", timeout: 60);
            var r = await dialog.WaitForResult();
            if (r is ConfirmationResult.Timeout or ConfirmationResult.Confirm)
            {
                Navigation.NavigateTo("/input");
            }
            else
            {
                await Reload();
            }
                
        }
    }


    public RootPageControls? Page { get; set; }


    private async Task OnClick()
    {
        if (IsGenerating)
            return;
        await ConfirmNext();
    }



}
