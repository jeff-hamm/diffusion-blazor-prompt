@page "/prompt"
@rendermode InteractiveWebAssembly
@using ButtsBlazor.Client.Services
@using ButtsBlazor.Client.Utils
@implements IAsyncDisposable
@inject IJSRuntime Js
@inject NavigationManager Navigation
@inject PromptGenerationService PromptGeneration
<div class="page-intro">
    <h1>BUTTS!</h1>
</div>
<section class="promptSlotSection">
    @if (choices != null)
    {
        <div class="input-image-container"><img class="input-image" src="@Selection"></div>
        <IndexSelector MaxIndex="@NumIndexes" RowSize="1" SelectedIndex="@SelectedIndex" SelectedIndexChanged="OnSelectedIndexChanged"></IndexSelector>
        <div class="wheels">
            @foreach (var option in choices)
            {
                <SlotWheel Options="option" Choice="@option.Choice" IsPreselected="option.Preselected" IsSelected="@(option.Part == selected?.Part)" ChoiceMade="ChoiceMade"></SlotWheel>
            }
        </div>
    }
</section>


@code {
    [Parameter, SupplyParameterFromQuery]
    public string? Selection { get; set; }

    private Task Select(string prompt)
    {
        Navigation.NavigateTo($"/generate?image={Selection}&prompt={prompt.Replace("&nbsp;"," ")}");
        return Task.CompletedTask;
    }
    public int SelectedIndex { get; set; }
    public int NumIndexes { get; set; }
    private PromptChoice[]? openChoices;
    private PromptChoice[]? choices;
    private PromptChoice? selected;
    private IJSObjectReference? _promptModule;

    private void BuildOpenChoices()
    {
        openChoices = choices?.Where(c => c.Choice == null).ToArray() ?? Array.Empty<PromptChoice>();
        NumIndexes = openChoices.Length;
        if (openChoices.Length == 0)
        {
            selected = null;
            SelectedIndex = 0;
            return;
        }
        selected = openChoices[SelectedIndex < openChoices.Length ? SelectedIndex : ^1];
    }

    protected override Task OnParametersSetAsync()
    {
        var builder = PromptGeneration.GetPromptBuilder();
        choices = builder.Build();
        BuildOpenChoices();
        return base.OnParametersSetAsync();
    }

    private Task Next()
    {
        if (choices == null) return Task.CompletedTask;
        return Select(choices.ToPromptString());
    }
    private void OnSelectedIndexChanged(int ix)
    {
        SelectedIndex = ix;
        BuildOpenChoices();
        StateHasChanged();
    }

    private async Task SelectWheel()
    {
        BuildOpenChoices();
        if (SelectedIndex >= openChoices?.Length)
        {
            SelectedIndex = openChoices != null ? openChoices.Length - 1 : 0;
            if (openChoices?.Length == 0)
            {
                await Next();
            }
        }
        StateHasChanged();
   
    }

    private Task ChoiceMade(string obj) => SelectWheel();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _promptModule = await Js.InvokeAsync<IJSObjectReference>("import", "/js/prompt.js");
        }

    }

    public async ValueTask DisposeAsync()
    {
        if (_promptModule != null)
        {
            await Js.InvokeVoidAsync("butts.detachAll");
            await _promptModule.DisposeAsync();
            _promptModule = null;
        }
    }

}
