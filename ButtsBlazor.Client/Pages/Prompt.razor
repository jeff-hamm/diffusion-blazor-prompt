@page "/prompt"
@rendermode ButtsBlazor.Server.Components.NoPreRenderWebAssembly.Instance
@using ButtsBlazor.Client.Services
@using ButtsBlazor.Client.Utils
@using ButtsBlazor.Client.Layout
@using ButtsBlazor.Shared.ViewModels

@inject IJSRuntime Js
@inject NavigationManager Navigation
@inject PromptGenerationService PromptGeneration
<script src="/js/slots.js?ver=1"></script>

<div class="page-intro">
    <h1><strong>B</strong>ooty <strong>D</strong>esign</h1>
</div>

<RootPageControls @ref="@Page" IsLoading="IsLoading" ReloadRequested="Reload" NavigateBack="NavigateBack">    </RootPageControls>

<CascadingValue Value="Page">
    <section class="promptSlotSection">
        @if (choices != null)
        {
            <div class="input-image-container"><img class="input-image" src="@Image"></div>
                <IndexSelector MaxIndex="@NumIndexes" RowSize="1" SelectedIndex="@SelectedIndex" SelectedIndexChanged="OnSelectedIndexChanged"></IndexSelector>
                <div class="wheels">
                    @foreach (var option in choices)
                    {
                        <SlotWheel Clicked="OnWheelClick" Options="option" Choice="@option.Choice" IsPreselected="option.Preselected" IsSelected="@(option.Part == selected?.Part)" ChoiceMade="ChoiceMade"></SlotWheel>
                    }
                </div>
        }
    </section>
</CascadingValue>

@code {
    [Parameter, SupplyParameterFromQuery]
    public string? Image { get; set; }
    [Parameter, SupplyParameterFromQuery]
    public string? Code { get; set; }
    public RootPageControls Page { get; set; } = null!;

    private Task Select(string prompt)
    {
        Navigation.NavigateTo($"/generate?image={Image}&prompt={prompt.Replace("&nbsp;"," ")}&code={Code}");
        return Task.CompletedTask;
    }
    public int SelectedIndex { get; set; }
    public int NumIndexes { get; set; }
    private PromptChoice[]? openChoices;
    private PromptChoice[]? choices;
    private PromptChoice? selected;


    private void BuildOpenChoices()
    {
        openChoices = choices?.Where(c => c.Choice == null).ToArray() ?? Array.Empty<PromptChoice>();
        NumIndexes = openChoices.Length;
        if (openChoices.Length == 0)
        {
            selected = null;
            SelectedIndex = 0;
            return;
        }
        selected = openChoices[SelectedIndex < openChoices.Length ? SelectedIndex : ^1];
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await Reload();
    }

    private Task Reload()
    {
        SelectedIndex = 0;
        var builder = PromptGeneration.GetPromptBuilder();
        choices = builder.Build();
        BuildOpenChoices();
        StateHasChanged();
        return Task.CompletedTask;
    }


    private Task Next()
    {
        if (choices == null) return Task.CompletedTask;
        return Select(choices.ToPromptString());
    }
    private Task OnWheelClick(SlotWheel arg)
    {
        if (choices == null) return Task.CompletedTask;
        for (int i = 0; i < choices.Length; i++)
        {
            if (choices[i] == arg.Options)
            {
                OnSelectedIndexChanged(i);
                break;
            }
        }
        return Task.CompletedTask;
    }

    private void OnSelectedIndexChanged(int ix)
    {
        SelectedIndex = ix;
        BuildOpenChoices();
        StateHasChanged();
    }

    private async Task SelectWheel()
    {
        BuildOpenChoices();
        if (SelectedIndex >= openChoices?.Length)
        {
            SelectedIndex = openChoices != null ? openChoices.Length - 1 : 0;
            if (openChoices?.Length == 0)
            {
                await Next();
            }
        }
        StateHasChanged();

    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private Task ChoiceMade(string obj) => SelectWheel();

    public bool IsLoading { get; set; }


    private void NavigateBack()
    {
        Navigation.NavigateTo("/input");
    }

}
